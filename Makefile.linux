CC=g++
LD=g++
MM=g++

# DEBUG = 0
# PROFILE = 0
# OCTAVE = 0

BUILDDIR = ./build
SRCDIR = ./src
INCLUDEDIR = ./src
TESTDIR = ./test
MEXDIR = ./mex
BINDIR = ./bin

CXXFLAGS=-I$(INCLUDEDIR) -fPIC --std=c++11 -pedantic #-D_GLIBCXX_DEBUG 
ifdef DEBUG
CXXFLAGS:=$(CXXFLAGS) -g -O0 -DMAS_DEBUG
else
CXXFLAGS:=$(CXXFLAGS) -O3
endif

MMFLAGS:=$(CXXFLAGS) -MM

LDFLAGS:= -pthread
ifdef PROFILE
CXXFLAGS:=$(CXXFLAGS) -pg
LDFLAGS:=$(LDFLAGS) -pg
endif

# Library extension
ifndef LIB_EXT
LIB_EXT:=so
endif

ifdef OCTAVE
# Octave
# Octave folders
ifndef MEX_EXT
MEX_EXT:=mex
endif
ifndef OCTAVE_INCLUDEDIR
OCTAVE_INCLUDEDIR:="/opt/octavedev/include/octave-4.1.0+/octave"
endif
ifndef OCTAVE_LIBDIR
OCTAVE_LIBDIR:="/opt/octavedev/lib/octave/4.1.0+"
endif

MEX_CXXFLAGS:=$(CXXFLAGS) -I$(MEXDIR) -DMX_COMPAT_32 -DMATLAB_MEX_FILE -I"$(OCTAVE_INCLUDEDIR)" -Wall
MEX_LDFLAGS:= $(LDFLAGS) -shared -L"$(OCTAVE_LIBDIR)" -lstdc++ -loctinterp

else
# Matlab
# Matlab folders
ifndef MATLAB_ROOT
MATLAB_ROOT:="/opt/matlab/R2014b"
endif
ifndef MATLAB_BINDIR
MATLAB_BINDIR:="$(MATLAB_ROOT)/bin/glnxa64"
endif
ifndef MEX_EXT
MEX_EXT:=mexa64
endif
ifndef MATLAB_INCLUDEDIR
MATLAB_INCLUDEDIR:="$(MATLAB_ROOT)/extern/include"
endif

MEX_CXXFLAGS:=$(CXXFLAGS) -I$(MEXDIR) -DMX_COMPAT_32 -DMATLAB_MEX_FILE -I"$(MATLAB_INCLUDEDIR)" -Wall
MEX_LDFLAGS:= $(LDFLAGS) -shared -L"$(MATLAB_BINDIR)" -lstdc++ -lmex -lmx -lmat
endif

MEX_MMFLAGS:=$(MEX_CXXFLAGS) -MM

MEX_SOURCES = $(shell find $(MEXDIR)/ -type f -name '*_mex.cxx')
MEX_OBJECTS = $(patsubst $(MEXDIR)/%.cxx, $(BUILDDIR)/%.mexo, $(MEX_SOURCES))
MEX_DEPS = $(patsubst $(MEXDIR)/%.cxx, $(BUILDDIR)/%.mexd, $(MEX_SOURCES))
MEX = $(patsubst $(MEXDIR)/%_mex.cxx, $(BINDIR)/%.$(MEX_EXT), $(MEX_SOURCES))

CMD_SOURCES = $(shell find $(SRCDIR)/ -type f -name '*_cmd.cxx')
CMD_OBJECTS =  $(patsubst $(SRCDIR)/%.cxx, $(BUILDDIR)/%.cmdo, $(CMD_SOURCES))
CMD_DEPS =  $(patsubst $(SRCDIR)/%.cxx, $(BUILDDIR)/%.cmdd, $(CMD_SOURCES))
CMD =  $(patsubst $(SRCDIR)/%_cmd.cxx, $(BINDIR)/%, $(CMD_SOURCES))

SOURCES := $(shell find $(SRCDIR)/ -type f -name '*.cxx')
SOURCES := $(filter-out $(MEX_SOURCES) $(CMD_SOURCES),$(SOURCES))
OBJECTS := $(patsubst $(SRCDIR)/%.cxx, $(BUILDDIR)/%.o, $(SOURCES))
DEPS := $(patsubst $(SRCDIR)/%.cxx, $(BUILDDIR)/%.d, $(SOURCES))
LIB := $(BINDIR)/maslib.$(LIB_EXT)

TEST_SOURCES := $(shell find $(TESTDIR)/ -type f -name '*.cxx')
TEST_OBJECTS := $(patsubst $(TESTDIR)/%.cxx, $(BUILDDIR)/%.to, $(TEST_SOURCES))
TEST_DEPS := $(patsubst $(TESTDIR)/%.cxx, $(BUILDDIR)/%.td, $(TEST_SOURCES))
TEST_CMD := $(patsubst $(TESTDIR)/%.cxx, $(BINDIR)/%, $(TEST_SOURCES))

M_FILES := $(shell find $(MEXDIR)/ -type f -name '*.m')
M_FILES_OUT := $(patsubst $(MEXDIR)/%.m, $(BINDIR)/%.m, $(M_FILES))

# $(notdir $(MEX_SOURCES:.cxx=.$(MEX_EXT))))

MKDIR_CMD=mkdir -p $(@D)
RM_CMD=rm -rf

default: all

cleanup:
	$(RM_CMD) $(OBJECTS) $(DEPS) $(MEX_OBJECTS) $(MEX_DEPS)	$(CMD_OBJECTS) $(CMD_DEPS) $(TEST_OBJECTS) $(TEST_DEPS)

clean: cleanup
	$(RM_CMD) $(CMD) $(MEX) $(LIB) $(TEST_CMD) $(M_FILES_OUT)

# do not delete intermediates
.SECONDARY:

vars:
	@echo "CMD_SOURCES: $(CMD_SOURCES)"
	@echo "CMD_OBJECTS: $(CMD_OBJECTS)"
	@echo "CMD: $(CMD)"
	@echo "MEX_OBJECTS: $(MEX_OBJECTS)"
	@echo "MEX_CXXFLAGS: $(MEX_CXXFLAGS)"
	@echo "MEX_LDFLAGS: $(MEX_LDFLAGS)"
	@echo "MEX: $(MEX)"
	@echo "TEST_OBJECTS: $(TEST_OBJECTS)"
	@echo "TEST_CMD: $(TEST_CMD)"
	@echo "TEST_DEPS: $(TEST_DEPS)"
	

all: cmd lib mex test

doc:
	@doxygen doc/maslib.doxyfile

mex: $(MEX) $(M_FILES_OUT)

cmd: $(CMD)

lib: $(LIB)

test: $(TEST_CMD)

deps: $(DEPS) $(MEX_DEPS) $(CMD_DEPS) $(TEST_DEPS)
	
tuple: 
	$(CC) $(CXXFLAGS) -o bin/mas/concurrency/tuple_test test/mas/concurrency/tuple_test.cxx
	
parallel_test: build/mas/core/time.o build/mas/concurrency/parallel_sort_test.to
	@echo Assembling $@ ...
	@$(LD) -o bin/mas/concurrency/parallel_sort_test $(LDFLAGS) build/mas/core/time.o build/mas/concurrency/parallel_sort_test.to
	
# include dependency rules	
-include $(DEPS)
-include $(MEX_DEPS)
-include $(CMD_DEPS)
-include $(TEST_DEPS)
	
# DEPENDENCIES
$(BUILDDIR)/%.d: $(SRCDIR)/%.cxx
	@$(MKDIR_CMD)
	@echo Updating dependencies $@...
	@$(MM) $(MMFLAGS) -MT $(@:.d=.o) $< >> $@

$(BUILDDIR)/%.mexd: $(MEXDIR)/%.cxx
	@$(MKDIR_CMD)
	@echo Updating dependencies $@...
	@$(MM) $(MEX_MMFLAGS) -MT $(@:.mexd=.mexo) $< >> $@

$(BUILDDIR)/%.cmdd: $(SRCDIR)/%.cxx
	@$(MKDIR_CMD)
	@echo Updating dependencies $@...
	@$(MM) $(MMFLAGS) -MT $(@:.cmdd=.cmdo) $< >> $@
	
$(BUILDDIR)/%.td: $(TESTDIR)/%.cxx
	@$(MKDIR_CMD)
	@echo Updating dependencies $@...
	@$(MM) $(MMFLAGS) -MT $(@:.td=.to) $< >> $@

# OBJECTS

$(BUILDDIR)/%.o: $(SRCDIR)/%.cxx
	@echo Compiling $@...
	@$(CC) $(CXXFLAGS) -o $@ -c $<

$(BUILDDIR)/%.mexo: $(MEXDIR)/%.cxx
	@echo Compiling $@...
	@$(CC) $(MEX_CXXFLAGS) -o $@ -c $<

$(BUILDDIR)/%.cmdo: $(SRCDIR)/%.cxx
	@echo Compiling $@...
	@$(CC) $(CXXFLAGS) -o $@ -c $<
	
$(BUILDDIR)/%.to: $(TESTDIR)/%.cxx
	@echo Compiling $@...
	@$(CC) $(CXXFLAGS) -o $@ -c $<

# Matlab

$(BINDIR)/%.$(MEX_EXT): $(BUILDDIR)/%_mex.mexo $(OBJECTS)
	@$(MKDIR_CMD)
	@echo Assembling $@ ...
	@$(LD) -o $@ $(MEX_LDFLAGS) $(OBJECTS) $<
	
$(BINDIR)/%.m: $(MEXDIR)/%.m
	@$(MKDIR_CMD)
	@echo Copying $@ ...
	@cp $< $@

# Command-line programs
		
$(BINDIR)/%: $(BUILDDIR)/%_cmd.cmdo $(OBJECTS)
	@$(MKDIR_CMD)
	@echo Assembling $@ ...
	@$(LD) -o $@ $(LDFLAGS) $(OBJECTS) $<
	
$(BINDIR)/%: $(BUILDDIR)/%.to $(OBJECTS)
	@$(MKDIR_CMD)
	@echo Assembling $@ ...
	@$(LD) -o $@ $(LDFLAGS) $(OBJECTS) $<
	
$(LIB) : $(OBJECTS)
	@$(MKDIR_CMD)
	@echo Assembling $@ ...
	@$(LD) -o $@ $(LDFLAGS) -fPIC -shared $(OBJECTS)
